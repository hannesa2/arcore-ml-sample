plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {

    namespace 'com.google.ar.core.examples.java.ml'
    compileSdkVersion 33

    defaultConfig {
        applicationId "com.google.ar.core.examples.java.ml"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode getGitCommitCount()
        versionName getTag()
    }

    signingConfigs {
        release {
            storeFile file('../signing/release.keystore')
            storePassword System.getenv("KEYSTORE_PASS")
            keyAlias System.getenv("ALIAS_NAME")
            keyPassword System.getenv("ALIAS_PASS")
        }
        debug {
            storePassword "android"
            keyPassword "android"
            keyAlias "androiddebugkey"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (System.getenv("CI_SERVER")) { // gitlab
                println "I run on Gitlab and use RELEASE signing"
                signingConfig signingConfigs.release
            } else if (file('../signing/release.keystore').exists()) {
                if (System.getenv("KEYSTORE_PASS") == null || System.getenv("ALIAS_NAME") == null || System.getenv("ALIAS_PASS") == null) {
                    println "I run somewhere else and I use DEBUG signing because variables are not set !"
                    signingConfig signingConfigs.debug
                } else {
                    println "I run somewhere else and I use RELEASE signing"
                    signingConfig signingConfigs.release
                }
            } else {
                println "I run somewhere else and I use debug signing"
                signingConfig signingConfigs.debug
            }
        }
        debug {
            if (System.getenv("CI") == "true") { // Github action
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
            applicationIdSuffix ".debug"
            versionNameSuffix ".debug"
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            if (variant.name == "release") {
                def builtType = variant.buildType.name
                def vName = variant.versionName
                def vCode = variant.versionCode
                // def flavor = variant.flavorName
                def newName = "ARCoreML"
                newName += "-${vName}-${vCode}-${builtType}.apk"
                outputFileName = newName
            }
            println "$variant.name: name is $outputFileName"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES', 'META-INF/INDEX.LIST']
        }
    }
}

android.sourceSets.main.java.srcDirs += ['../third_party']

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.4.2'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.coordinatorlayout:coordinatorlayout:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'

    implementation 'com.google.android.material:material:1.7.0'

    // Google Cloud Vision APIs
    implementation platform('com.google.cloud:libraries-bom:19.2.1')
    implementation 'com.google.cloud:google-cloud-vision:1.102.0'
    implementation 'io.grpc:grpc-okhttp:1.36.0'

    // MLKit
    implementation 'com.google.mlkit:object-detection:16.2.3'
    implementation 'com.google.mlkit:object-detection-custom:16.3.1'

    // ARCore
    implementation 'com.google.ar:core:1.24.0'

    // Obj - a simple Wavefront OBJ file loader
    // https://github.com/javagl/Obj
    implementation 'de.javagl:obj:0.2.1'
}

static def getGitCommitCount() {
    def process = "git rev-list HEAD --count".execute()
    return process.text.toInteger()
}

static def getTag() {
    def process = "git describe --tags".execute()
    return process.text.toString().trim()
}
